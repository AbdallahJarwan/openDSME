/*
 * openDSME
 *
 * Implementation of the Deterministic & Synchronous Multi-channel Extension (DSME)
 * described in the IEEE 802.15.4-2015 standard
 *
 * Authors: Florian Kauer <florian.kauer@tuhh.de>
 *          Maximilian Koestler <maximilian.koestler@tuhh.de>
 *          Sandrina Backhauss <sandrina.backhauss@tuhh.de>
 *
 * Based on
 *          DSME Implementation for the INET Framework
 *          Tobias Luebkert <tobias.luebkert@tuhh.de>
 *
 * Copyright (c) 2015, Institute of Telematics, Hamburg University of Technology
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "./NeuralNetwork.h"

namespace dsme {

/******** Layer 0 ********/
static const float l0_weights_array[180] {
    0.76886350,-1.38772094,0.24498451,-2.55577421,1.84165442,-1.05441415,3.36855578,-0.30620641,-0.62704331,
    -3.32435012,7.23820782,-19.61276436,-3.66756749,7.51276875,1.53946972,-3.88142419,14.70906639,25.24009514,
    1.35176003,-0.22913818,0.48040742,-0.73869097,-0.38053995,0.91020083,1.37263656,-0.73609638,-0.18840557,
    1.48518145,-0.32702684,1.80304003,-2.51163840,1.32378280,-2.22962141,1.94510853,0.30213863,-1.16550851,
    -10.81172752,-3.88401651,2.30249500,4.91042471,-15.94770241,3.43837953,3.78440690,1.43713498,-0.01994561,
    -0.36980632,1.28900337,1.23649859,0.09183569,-1.14926100,-0.80267185,-0.96383446,2.50202942,-0.88223243,
    1.67199302,1.21619081,0.46151784,-1.56229472,0.85365307,-1.65993011,2.70526600,0.84283280,-2.90286303,
    7.43045044,-1.93970156,0.76758742,43.81254196,13.96764183,30.23125648,-10.94907665,34.98969269,-17.87107849,
    -1.33983397,-1.33210385,-0.70770448,-0.97528011,4.08060741,-2.84579396,0.50672567,-0.09586367,0.26360089,
    -0.87054127,0.02382291,-1.24621511,-1.29521525,3.39435244,-2.96141362,-0.33634570,1.08769321,-2.39792418,
    -1.32648039,7.67830992,-0.53294754,5.55948639,1.19595540,0.85994327,1.43473017,9.31795406,-2.64322209,
    -0.06527027,-0.36253849,-0.84594595,4.82776833,-0.65274143,-3.83773446,-0.27160800,0.37030080,3.39433551,
    1.26875281,-4.74533033,-0.41445506,-4.08567715,-0.15439549,-1.10792756,-0.33981761,-3.90710354,-0.00422103,
    -5.98568153,-0.67803997,-5.90730906,9.16734028,17.64776802,-6.51223278,-23.21682549,-62.81777573,-8.27981949,
    -0.25098959,7.05415678,1.72161353,2.65973234,5.75905800,3.71859479,0.21031597,-6.89642239,-9.52874756,
    2.78095603,-0.98837316,2.30497718,-6.10906172,-4.24831152,0.50598967,14.27190590,-0.36785021,-0.83325803,
    -0.87382317,-0.07911088,-0.74298126,0.34839684,0.58806670,-0.07219265,-0.67316705,0.69852805,-0.34737495,
    -0.11144967,-0.03376609,-0.99341226,4.69928408,-0.73768878,-2.52605462,-0.67170703,-0.71714431,3.57578897,
    0.07911814,-1.92304409,-1.72372591,0.84938896,1.12417459,-0.94177878,-0.60399705,-1.17868054,1.96779335,
    3.23343062,-0.20822214,-1.69023991,-1.49193025,7.42486906,-5.63918257,1.62587762,-4.28926039,-0.72052866,
};
static float l0_bias_array[20] {
    1.91104555,-6.45889664,-4.73854780,-1.85953474,11.84828568,-2.10145855,0.67911083,-10.34991646,-0.63135612,2.17990327,-2.67183495,-4.67855501,0.85129619,-5.11580753,-10.05625534,4.29787779,2.24838161,-4.61940098,1.47032499,-1.72528231
};
static float l0_output_array[20];

static const quicknet::matrix_t l0_weights{20,9,l0_weights_array};
static const quicknet::vector_t l0_bias{20,l0_bias_array};
static quicknet::vector_t l0_output{20,l0_output_array};

/******** Layer 1 ********/
static const float l1_weights_array[400] {
    0.00607114,-0.00232508,-0.03373360,-0.01292269,-0.07332616,-0.04728901,0.00146568,-0.02951896,0.00351531,0.03943771,-0.03133393,0.02562979,-0.06033943,-0.19309302,-0.00999391,-0.26901200,-0.07674272,-0.03456821,-0.01225949,-0.04748332,
    0.00007129,0.00191459,-0.01805162,-0.00571736,-0.02649946,-0.01090627,0.00798404,-0.01386125,-0.01174240,0.00850433,0.00105110,0.04259541,-0.01969064,-0.06177666,-0.00815796,-0.10075054,-0.02590506,-0.03928660,0.00456622,-0.02708354,
    -1.22542560,0.13104409,0.08274349,0.95295191,0.91855383,0.20405862,-1.03921247,0.22056051,0.55026591,-0.74701446,0.56871045,-0.69391179,1.08508933,-0.41540468,0.22066888,2.39680004,1.10791874,0.37426290,0.22107840,0.24493434,
    1.51078510,0.22754076,-0.10667399,-0.74367410,-0.48013929,-0.30219498,-2.38094497,0.48078719,-2.94082594,1.74923623,0.17195353,0.88659620,0.38250208,-1.72923398,0.87798417,0.10270296,-1.02912915,-0.87420517,0.14146152,-0.05817696,
    1.66120791,-0.51969510,1.57462645,-0.52412432,-1.72573817,0.52917582,-1.49879074,-0.80365455,-1.36054099,0.11669579,0.41849592,-0.66747934,0.18443406,0.94867510,0.22806941,0.73238075,1.84137332,1.72531521,0.05717121,-0.25576040,
    -1.05285335,-0.77898180,1.29806638,1.74482965,-1.86199772,-0.25373274,-1.07604504,-1.04508233,1.83334374,-1.69276416,1.39046133,-0.01349668,0.06375087,-1.57614207,1.09365952,0.62774903,2.55207992,-0.08608401,0.84098834,-1.48897219,
    1.50043631,-0.59382802,-0.08372059,0.35337725,-1.63891590,0.07988276,-1.60525811,-0.75335860,-0.49134767,0.15327762,0.15869512,-0.29933116,-0.06892591,-4.15796518,1.19001520,-0.86984557,-0.05350434,0.36421302,0.68556768,-0.76995885,
    0.70544416,-0.93239987,0.56242836,-0.34678987,-0.31932509,2.38706827,-0.87492573,-0.23257363,0.44150993,-0.12303816,-0.86620325,-3.20536590,-1.35683453,0.54292858,-0.40621880,1.29563344,0.76372075,2.67884803,1.07877028,0.95648181,
    -0.93858778,0.32938397,0.73624504,0.46266541,1.37715673,-1.18606329,1.36489689,0.38495529,0.78367096,0.19776170,-0.49025372,0.71912527,-0.94495922,3.72788167,-0.48442098,1.83390808,0.46972513,-0.01913508,-1.36452651,0.59612399,
    1.82593775,-0.05271255,-1.75284255,-0.85753632,0.95897979,0.65273935,0.23058614,0.29154882,1.65084827,-0.92363876,1.55186093,0.07436160,1.67659485,-1.64330697,0.89021182,-0.79047537,-2.42232800,-0.37597933,0.16502614,0.32365569,
    -0.00206758,0.01318352,0.01899268,0.01278703,0.04882814,0.04689366,-0.00680017,0.02665652,-0.00062057,-0.03317160,0.02650879,-0.03474055,0.03140398,0.15526976,0.00173009,0.20102793,0.06117376,0.06481250,0.01335176,0.02073064,
    0.54250085,0.29153106,-0.09354973,0.42339778,-1.08073878,-0.84354085,-0.78079069,-0.30627683,-0.93282092,0.35871392,0.70176023,1.66592145,1.58365667,-3.10093141,0.65828151,-2.24986625,0.49263266,-0.84727508,-0.15563880,-1.14362204,
    -2.20359826,0.54596496,-0.59756821,1.22401679,0.72002053,-1.64276135,0.25607532,0.22667192,1.21870136,-0.60078555,1.05854023,1.28978479,1.61175346,0.08091545,-0.08742120,1.39558792,0.05048133,-1.52073812,-0.58551109,-0.69159257,
    -0.00838924,0.00946135,0.00891770,-0.00003296,0.01260174,0.01304235,-0.00706071,0.00588068,-0.00118024,-0.00433836,0.01217822,0.00941109,0.00731937,0.04582956,-0.00332292,0.06029347,0.01825979,0.00414794,0.00140527,0.01019842,
    0.01351693,0.00056796,0.00813510,-0.00018217,-0.00639632,0.00004969,-0.00270915,-0.00310093,-0.00534169,-0.00212688,-0.00921186,-0.00340612,-0.00847439,-0.00839348,0.00818856,-0.00635135,0.00769569,-0.00920888,-0.00064100,-0.00579594,
    0.35776031,1.03174293,-0.94645798,-0.61332530,2.65404534,1.02926672,-0.64875674,1.61888242,1.98264194,-2.57079625,0.52584213,-1.54400051,-0.35186288,-0.55422264,0.47998172,-0.20610124,-1.28221762,-0.70113468,1.41480422,1.15583682,
    2.04617906,-0.04124225,-0.73006010,-0.79451478,1.06722569,1.18122256,0.04328792,0.42879897,0.94392562,-0.48241115,1.59551275,-1.12569177,1.01441705,-0.38030413,0.54626650,-0.60513484,-1.96813965,1.34793580,0.61803532,0.50858980,
    -0.00351871,0.00609920,0.02979094,0.10773773,0.08528167,0.11028498,-0.34632576,0.03674771,0.09194473,-0.13829735,0.28962693,-0.30744708,0.38511574,0.14180189,0.03441050,0.32566839,0.18783569,0.34425691,-0.01081224,0.04559264,
    -0.08653485,0.12306193,1.72086227,0.23713711,-0.85166949,0.42663074,-1.91405594,0.18836747,-2.75467777,1.13328075,-1.55326760,-1.05567849,-1.76039636,2.52749419,-0.46684060,1.59298205,2.00312328,1.59655952,-0.28160837,0.53735757,
    -0.14543562,-0.56261861,0.11289902,-0.52111369,-0.05971790,1.03117013,0.27465791,-0.35994610,1.00104809,0.13823313,0.01360939,-0.03671671,-1.86112046,-1.39904201,-0.50161105,-1.72661757,-1.13979328,-1.36201978,1.01885939,0.94873333,
};
static float l1_bias_array[20] {
    0.41947275,0.14927319,-2.41488647,0.64124131,-1.17441416,0.28422812,1.77175725,-1.36156142,-2.40270972,-0.94532031,-0.30199572,1.95369470,-0.68556756,-0.08246332,0.00856759,-0.97028726,-2.09071469,-0.56047070,-0.38507086,2.32304478
};
static float l1_output_array[20];

static const quicknet::matrix_t l1_weights{20,20,l1_weights_array};
static const quicknet::vector_t l1_bias{20,l1_bias_array};
static quicknet::vector_t l1_output{20,l1_output_array};

/******** Layer 2 ********/
static const float l2_weights_array[180] {
    0.06250274,0.04275835,0.21731897,-0.46627498,-0.23628114,-1.08346510,-0.64042157,2.18129921,0.25999880,-0.41965428,-0.00821918,-0.88119936,-0.14110757,0.01036589,-0.19191606,0.07838767,-0.23039584,0.00377146,-0.11708994,-0.28871059,
    0.05237757,0.03663999,0.09109660,-0.00049630,-0.51439226,-1.74621642,0.13721105,1.79354739,0.85783499,0.04195421,-0.01280330,-1.75564325,-0.10079700,0.00627046,-0.19087006,-0.12810196,-0.26992974,0.00895937,-0.22335902,0.01495786,
    0.05026356,0.03327196,0.91362238,0.07997186,-0.51698673,0.38194042,0.13563548,-1.30308390,-0.31498230,0.02767521,-0.00913551,0.45780391,0.52832073,0.00682464,-0.19080026,-0.16840719,-0.35877723,0.01060046,-1.54933512,-0.65960461,
    0.05793777,0.04134401,-0.33785322,0.04019483,0.42886922,1.21988404,0.46590596,1.49543262,-1.01179814,-0.19782992,-0.00750355,0.26790714,-0.44390121,0.01059716,-0.19180699,-0.44592595,-0.26804677,0.00946134,0.78178746,-0.24871765,
    0.05899665,0.04271981,-1.27475441,-0.09459117,-0.12913842,0.32438263,-0.00438166,-1.54046869,0.05274958,-0.18826573,-0.00689706,0.38597089,-0.03309087,0.01075362,-0.19246267,-0.92368466,-0.72122139,0.00960024,-0.87151861,0.15688477,
    0.04994521,0.03746725,1.05478680,0.00551854,0.65986055,0.18617681,-0.21606234,0.79361504,1.49257481,0.04655579,-0.00521368,-0.73620588,-0.00094348,0.00878242,-0.19154695,-0.30530533,0.67107970,0.01520230,0.77295566,-1.32516885,
    0.05665672,0.04156233,-0.77040255,0.07536886,-0.20430793,0.20305113,0.26459983,-0.09316172,-0.60701013,0.37825832,-0.00174788,0.05905791,-0.29339868,0.01306013,-0.19212267,0.57547653,1.06209219,0.00673042,-1.78526235,0.33860362,
    0.05614965,0.04218658,0.10653582,0.13771082,0.11581584,0.60395503,0.03106842,-0.01701348,0.22836886,-0.23367885,-0.00447357,-0.27975261,0.04134327,0.01129710,-0.19218296,0.35067984,-0.52443600,0.01443314,1.38434839,-0.04442604,
    0.05696195,0.03508111,-1.19442534,0.24518834,0.00764753,-2.44079065,0.18814717,-0.96692020,-0.86967218,0.35797253,-0.01753806,0.49652696,-0.36344701,0.00480903,-0.19038859,0.18376440,0.50273973,0.00933639,-0.83182919,-0.21323863,
};
static float l2_bias_array[9] {
    -1.14108646,-1.21101880,-0.23022437,0.47731480,1.35759020,-0.87425560,-0.20193224,0.26242384,0.38433540
};
static float l2_output_array[9];

static const quicknet::matrix_t l2_weights{9,20,l2_weights_array};
static const quicknet::vector_t l2_bias{9,l2_bias_array};
static quicknet::vector_t l2_output{9,l2_output_array};

/******** Network ********/
static quicknet::Layer layers[3] {
    {l0_weights, l0_bias, l0_output, quicknet::quick_sigmoid},
    {l1_weights, l1_bias, l1_output, quicknet::quick_linear},
    {l2_weights, l2_bias, l2_output, quicknet::quick_softmax},
};

NeuralNetwork::NeuralNetwork() : network{3, layers} {
}

} /* namespace dsme */
